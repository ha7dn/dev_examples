//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace API_Paycomet_cs.api.paycomet.com {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PAYTPV_BankStoreGatewayBinding", Namespace="urn:PAYTPV_BankStoreGateway")]
    public partial class PAYTPV_BankStoreGatewayService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback add_userOperationCompleted;
        
        private System.Threading.SendOrPostCallback add_user_tokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback add_user_dukptOperationCompleted;
        
        private System.Threading.SendOrPostCallback info_userOperationCompleted;
        
        private System.Threading.SendOrPostCallback remove_userOperationCompleted;
        
        private System.Threading.SendOrPostCallback execute_purchaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback execute_purchase_dccOperationCompleted;
        
        private System.Threading.SendOrPostCallback confirm_purchase_dccOperationCompleted;
        
        private System.Threading.SendOrPostCallback execute_refundOperationCompleted;
        
        private System.Threading.SendOrPostCallback create_subscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback edit_subscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback remove_subscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback create_subscription_tokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback create_preauthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback preauthorization_confirmOperationCompleted;
        
        private System.Threading.SendOrPostCallback preauthorization_cancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback deferred_preauthorization_confirmOperationCompleted;
        
        private System.Threading.SendOrPostCallback deferred_preauthorization_cancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback execute_purchase_rtokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback split_transferOperationCompleted;
        
        private System.Threading.SendOrPostCallback split_transfer_reversalOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_balanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback update_expiry_dateOperationCompleted;
        
        private System.Threading.SendOrPostCallback transferOperationCompleted;
        
        private System.Threading.SendOrPostCallback transfer_reversalOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PAYTPV_BankStoreGatewayService() {
            this.Url = global::API_Paycomet_cs.Properties.Settings.Default.API_Paycomet_cs_api_paycomet_com_PAYTPV_BankStoreGatewayService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event add_userCompletedEventHandler add_userCompleted;
        
        /// <remarks/>
        public event add_user_tokenCompletedEventHandler add_user_tokenCompleted;
        
        /// <remarks/>
        public event add_user_dukptCompletedEventHandler add_user_dukptCompleted;
        
        /// <remarks/>
        public event info_userCompletedEventHandler info_userCompleted;
        
        /// <remarks/>
        public event remove_userCompletedEventHandler remove_userCompleted;
        
        /// <remarks/>
        public event execute_purchaseCompletedEventHandler execute_purchaseCompleted;
        
        /// <remarks/>
        public event execute_purchase_dccCompletedEventHandler execute_purchase_dccCompleted;
        
        /// <remarks/>
        public event confirm_purchase_dccCompletedEventHandler confirm_purchase_dccCompleted;
        
        /// <remarks/>
        public event execute_refundCompletedEventHandler execute_refundCompleted;
        
        /// <remarks/>
        public event create_subscriptionCompletedEventHandler create_subscriptionCompleted;
        
        /// <remarks/>
        public event edit_subscriptionCompletedEventHandler edit_subscriptionCompleted;
        
        /// <remarks/>
        public event remove_subscriptionCompletedEventHandler remove_subscriptionCompleted;
        
        /// <remarks/>
        public event create_subscription_tokenCompletedEventHandler create_subscription_tokenCompleted;
        
        /// <remarks/>
        public event create_preauthorizationCompletedEventHandler create_preauthorizationCompleted;
        
        /// <remarks/>
        public event preauthorization_confirmCompletedEventHandler preauthorization_confirmCompleted;
        
        /// <remarks/>
        public event preauthorization_cancelCompletedEventHandler preauthorization_cancelCompleted;
        
        /// <remarks/>
        public event deferred_preauthorization_confirmCompletedEventHandler deferred_preauthorization_confirmCompleted;
        
        /// <remarks/>
        public event deferred_preauthorization_cancelCompletedEventHandler deferred_preauthorization_cancelCompleted;
        
        /// <remarks/>
        public event execute_purchase_rtokenCompletedEventHandler execute_purchase_rtokenCompleted;
        
        /// <remarks/>
        public event split_transferCompletedEventHandler split_transferCompleted;
        
        /// <remarks/>
        public event split_transfer_reversalCompletedEventHandler split_transfer_reversalCompleted;
        
        /// <remarks/>
        public event get_balanceCompletedEventHandler get_balanceCompleted;
        
        /// <remarks/>
        public event update_expiry_dateCompletedEventHandler update_expiry_dateCompleted;
        
        /// <remarks/>
        public event transferCompletedEventHandler transferCompleted;
        
        /// <remarks/>
        public event transfer_reversalCompletedEventHandler transfer_reversalCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#add_user", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_IDUSER")]
        public string add_user(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_PAN, string DS_MERCHANT_EXPIRYDATE, string DS_MERCHANT_CVV2, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_CARDHOLDERNAME, out string DS_TOKEN_USER, out string DS_ERROR_ID) {
            object[] results = this.Invoke("add_user", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_PAN,
                        DS_MERCHANT_EXPIRYDATE,
                        DS_MERCHANT_CVV2,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_CARDHOLDERNAME});
            DS_TOKEN_USER = ((string)(results[1]));
            DS_ERROR_ID = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void add_userAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_PAN, string DS_MERCHANT_EXPIRYDATE, string DS_MERCHANT_CVV2, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_CARDHOLDERNAME) {
            this.add_userAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_PAN, DS_MERCHANT_EXPIRYDATE, DS_MERCHANT_CVV2, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_MERCHANT_CARDHOLDERNAME, null);
        }
        
        /// <remarks/>
        public void add_userAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_PAN, string DS_MERCHANT_EXPIRYDATE, string DS_MERCHANT_CVV2, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_CARDHOLDERNAME, object userState) {
            if ((this.add_userOperationCompleted == null)) {
                this.add_userOperationCompleted = new System.Threading.SendOrPostCallback(this.Onadd_userOperationCompleted);
            }
            this.InvokeAsync("add_user", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_PAN,
                        DS_MERCHANT_EXPIRYDATE,
                        DS_MERCHANT_CVV2,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_CARDHOLDERNAME}, this.add_userOperationCompleted, userState);
        }
        
        private void Onadd_userOperationCompleted(object arg) {
            if ((this.add_userCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.add_userCompleted(this, new add_userCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#add_user_token", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_IDUSER")]
        public string add_user_token(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_JETTOKEN, string DS_MERCHANT_JETID, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, out string DS_TOKEN_USER, out string DS_ERROR_ID) {
            object[] results = this.Invoke("add_user_token", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_JETTOKEN,
                        DS_MERCHANT_JETID,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP});
            DS_TOKEN_USER = ((string)(results[1]));
            DS_ERROR_ID = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void add_user_tokenAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_JETTOKEN, string DS_MERCHANT_JETID, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP) {
            this.add_user_tokenAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_JETTOKEN, DS_MERCHANT_JETID, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void add_user_tokenAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_JETTOKEN, string DS_MERCHANT_JETID, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.add_user_tokenOperationCompleted == null)) {
                this.add_user_tokenOperationCompleted = new System.Threading.SendOrPostCallback(this.Onadd_user_tokenOperationCompleted);
            }
            this.InvokeAsync("add_user_token", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_JETTOKEN,
                        DS_MERCHANT_JETID,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP}, this.add_user_tokenOperationCompleted, userState);
        }
        
        private void Onadd_user_tokenOperationCompleted(object arg) {
            if ((this.add_user_tokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.add_user_tokenCompleted(this, new add_user_tokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#add_user_dukpt", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_IDUSER")]
        public string add_user_dukpt(string DS_PROVIDER_ID, string DS_MERCHANT_ID, string DS_TERMINAL_ID, string DS_DEVICE_KSN, string DS_DEVICE_DUKPT, string DS_SIGNATURE, string DS_ORIGINAL_IP, out string DS_TOKEN_USER, out string DS_EXPIRY_DATE, out string DS_ERROR_ID) {
            object[] results = this.Invoke("add_user_dukpt", new object[] {
                        DS_PROVIDER_ID,
                        DS_MERCHANT_ID,
                        DS_TERMINAL_ID,
                        DS_DEVICE_KSN,
                        DS_DEVICE_DUKPT,
                        DS_SIGNATURE,
                        DS_ORIGINAL_IP});
            DS_TOKEN_USER = ((string)(results[1]));
            DS_EXPIRY_DATE = ((string)(results[2]));
            DS_ERROR_ID = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void add_user_dukptAsync(string DS_PROVIDER_ID, string DS_MERCHANT_ID, string DS_TERMINAL_ID, string DS_DEVICE_KSN, string DS_DEVICE_DUKPT, string DS_SIGNATURE, string DS_ORIGINAL_IP) {
            this.add_user_dukptAsync(DS_PROVIDER_ID, DS_MERCHANT_ID, DS_TERMINAL_ID, DS_DEVICE_KSN, DS_DEVICE_DUKPT, DS_SIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void add_user_dukptAsync(string DS_PROVIDER_ID, string DS_MERCHANT_ID, string DS_TERMINAL_ID, string DS_DEVICE_KSN, string DS_DEVICE_DUKPT, string DS_SIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.add_user_dukptOperationCompleted == null)) {
                this.add_user_dukptOperationCompleted = new System.Threading.SendOrPostCallback(this.Onadd_user_dukptOperationCompleted);
            }
            this.InvokeAsync("add_user_dukpt", new object[] {
                        DS_PROVIDER_ID,
                        DS_MERCHANT_ID,
                        DS_TERMINAL_ID,
                        DS_DEVICE_KSN,
                        DS_DEVICE_DUKPT,
                        DS_SIGNATURE,
                        DS_ORIGINAL_IP}, this.add_user_dukptOperationCompleted, userState);
        }
        
        private void Onadd_user_dukptOperationCompleted(object arg) {
            if ((this.add_user_dukptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.add_user_dukptCompleted(this, new add_user_dukptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#info_user", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_PAN")]
        public string info_user(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID, out string DS_CARD_BRAND, out string DS_CARD_TYPE, out string DS_CARD_I_COUNTRY_ISO3, out string DS_EXPIRYDATE, out string DS_CARD_HASH, out string DS_CARD_CATEGORY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_SEPA_CARD) {
            object[] results = this.Invoke("info_user", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP});
            DS_ERROR_ID = ((string)(results[1]));
            DS_CARD_BRAND = ((string)(results[2]));
            DS_CARD_TYPE = ((string)(results[3]));
            DS_CARD_I_COUNTRY_ISO3 = ((string)(results[4]));
            DS_EXPIRYDATE = ((string)(results[5]));
            DS_CARD_HASH = ((string)(results[6]));
            DS_CARD_CATEGORY = ((string)(results[7]));
            DS_SEPA_CARD = ((string)(results[8]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void info_userAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP) {
            this.info_userAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void info_userAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.info_userOperationCompleted == null)) {
                this.info_userOperationCompleted = new System.Threading.SendOrPostCallback(this.Oninfo_userOperationCompleted);
            }
            this.InvokeAsync("info_user", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP}, this.info_userOperationCompleted, userState);
        }
        
        private void Oninfo_userOperationCompleted(object arg) {
            if ((this.info_userCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.info_userCompleted(this, new info_userCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#remove_user", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_RESPONSE", DataType="integer")]
        public string remove_user(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("remove_user", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP});
            DS_ERROR_ID = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void remove_userAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP) {
            this.remove_userAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void remove_userAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.remove_userOperationCompleted == null)) {
                this.remove_userOperationCompleted = new System.Threading.SendOrPostCallback(this.Onremove_userOperationCompleted);
            }
            this.InvokeAsync("remove_user", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP}, this.remove_userOperationCompleted, userState);
        }
        
        private void Onremove_userOperationCompleted(object arg) {
            if ((this.remove_userCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.remove_userCompleted(this, new remove_userCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#execute_purchase", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_AUTHCODE")]
        public string execute_purchase(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    ref string DS_MERCHANT_AMOUNT, 
                    ref string DS_MERCHANT_ORDER, 
                    ref string DS_MERCHANT_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_PRODUCTDESCRIPTION, 
                    string DS_MERCHANT_OWNER, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_MERCHANTDESCRIPTOR, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_USER_INTERACTION, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID, 
                    out string DS_CHALLENGE_URL) {
            object[] results = this.Invoke("execute_purchase", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_OWNER,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_MERCHANTDESCRIPTOR,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_CURRENCY = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            DS_CHALLENGE_URL = ((string)(results[7]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void execute_purchaseAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    string DS_MERCHANT_AMOUNT, 
                    string DS_MERCHANT_ORDER, 
                    string DS_MERCHANT_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_PRODUCTDESCRIPTION, 
                    string DS_MERCHANT_OWNER, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_MERCHANTDESCRIPTOR, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION) {
            this.execute_purchaseAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_MERCHANT_PRODUCTDESCRIPTION, DS_MERCHANT_OWNER, DS_MERCHANT_SCORING, DS_MERCHANT_DATA, DS_MERCHANT_MERCHANTDESCRIPTOR, DS_MERCHANT_SCA_EXCEPTION, DS_MERCHANT_TRX_TYPE, DS_ESCROW_TARGETS, DS_USER_INTERACTION, null);
        }
        
        /// <remarks/>
        public void execute_purchaseAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    string DS_MERCHANT_AMOUNT, 
                    string DS_MERCHANT_ORDER, 
                    string DS_MERCHANT_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_PRODUCTDESCRIPTION, 
                    string DS_MERCHANT_OWNER, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_MERCHANTDESCRIPTOR, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION, 
                    object userState) {
            if ((this.execute_purchaseOperationCompleted == null)) {
                this.execute_purchaseOperationCompleted = new System.Threading.SendOrPostCallback(this.Onexecute_purchaseOperationCompleted);
            }
            this.InvokeAsync("execute_purchase", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_OWNER,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_MERCHANTDESCRIPTOR,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION}, this.execute_purchaseOperationCompleted, userState);
        }
        
        private void Onexecute_purchaseOperationCompleted(object arg) {
            if ((this.execute_purchaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.execute_purchaseCompleted(this, new execute_purchaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#execute_purchase_dcc", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_CURRENCY")]
        public string execute_purchase_dcc(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    ref string DS_MERCHANT_AMOUNT, 
                    ref string DS_MERCHANT_ORDER, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_PRODUCTDESCRIPTION, 
                    string DS_MERCHANT_OWNER, 
                    string DS_MERCHANT_MERCHANTDESCRIPTOR, 
                    out string DS_MERCHANT_DCC_SESSION, 
                    out string DS_MERCHANT_DCC_CURRENCY, 
                    out string DS_MERCHANT_DCC_CURRENCYISO3, 
                    out string DS_MERCHANT_DCC_CURRENCYNAME, 
                    out string DS_MERCHANT_DCC_EXCHANGE, 
                    out string DS_MERCHANT_DCC_AMOUNT, 
                    out string DS_MERCHANT_DCC_MARKUP, 
                    out string DS_MERCHANT_DCC_CARDCOUNTRY, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("execute_purchase_dcc", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_OWNER,
                        DS_MERCHANT_MERCHANTDESCRIPTOR});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_DCC_SESSION = ((string)(results[3]));
            DS_MERCHANT_DCC_CURRENCY = ((string)(results[4]));
            DS_MERCHANT_DCC_CURRENCYISO3 = ((string)(results[5]));
            DS_MERCHANT_DCC_CURRENCYNAME = ((string)(results[6]));
            DS_MERCHANT_DCC_EXCHANGE = ((string)(results[7]));
            DS_MERCHANT_DCC_AMOUNT = ((string)(results[8]));
            DS_MERCHANT_DCC_MARKUP = ((string)(results[9]));
            DS_MERCHANT_DCC_CARDCOUNTRY = ((string)(results[10]));
            DS_RESPONSE = ((string)(results[11]));
            DS_ERROR_ID = ((string)(results[12]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void execute_purchase_dccAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_PRODUCTDESCRIPTION, string DS_MERCHANT_OWNER, string DS_MERCHANT_MERCHANTDESCRIPTOR) {
            this.execute_purchase_dccAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_MERCHANT_PRODUCTDESCRIPTION, DS_MERCHANT_OWNER, DS_MERCHANT_MERCHANTDESCRIPTOR, null);
        }
        
        /// <remarks/>
        public void execute_purchase_dccAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_PRODUCTDESCRIPTION, string DS_MERCHANT_OWNER, string DS_MERCHANT_MERCHANTDESCRIPTOR, object userState) {
            if ((this.execute_purchase_dccOperationCompleted == null)) {
                this.execute_purchase_dccOperationCompleted = new System.Threading.SendOrPostCallback(this.Onexecute_purchase_dccOperationCompleted);
            }
            this.InvokeAsync("execute_purchase_dcc", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_OWNER,
                        DS_MERCHANT_MERCHANTDESCRIPTOR}, this.execute_purchase_dccOperationCompleted, userState);
        }
        
        private void Onexecute_purchase_dccOperationCompleted(object arg) {
            if ((this.execute_purchase_dccCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.execute_purchase_dccCompleted(this, new execute_purchase_dccCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#confirm_purchase_dcc", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_AMOUNT", DataType="integer")]
        public string confirm_purchase_dcc(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_DCC_CURRENCY, string DS_MERCHANT_DCC_SESSION, string DS_MERCHANT_MERCHANTSIGNATURE, out string DS_MERCHANT_CURRENCY, out string DS_MERCHANT_AUTHCODE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("confirm_purchase_dcc", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_DCC_CURRENCY,
                        DS_MERCHANT_DCC_SESSION,
                        DS_MERCHANT_MERCHANTSIGNATURE});
            DS_MERCHANT_ORDER = ((string)(results[1]));
            DS_MERCHANT_CURRENCY = ((string)(results[2]));
            DS_MERCHANT_AUTHCODE = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void confirm_purchase_dccAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_MERCHANT_DCC_CURRENCY, string DS_MERCHANT_DCC_SESSION, string DS_MERCHANT_MERCHANTSIGNATURE) {
            this.confirm_purchase_dccAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_ORDER, DS_MERCHANT_DCC_CURRENCY, DS_MERCHANT_DCC_SESSION, DS_MERCHANT_MERCHANTSIGNATURE, null);
        }
        
        /// <remarks/>
        public void confirm_purchase_dccAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_MERCHANT_DCC_CURRENCY, string DS_MERCHANT_DCC_SESSION, string DS_MERCHANT_MERCHANTSIGNATURE, object userState) {
            if ((this.confirm_purchase_dccOperationCompleted == null)) {
                this.confirm_purchase_dccOperationCompleted = new System.Threading.SendOrPostCallback(this.Onconfirm_purchase_dccOperationCompleted);
            }
            this.InvokeAsync("confirm_purchase_dcc", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_DCC_CURRENCY,
                        DS_MERCHANT_DCC_SESSION,
                        DS_MERCHANT_MERCHANTSIGNATURE}, this.confirm_purchase_dccOperationCompleted, userState);
        }
        
        private void Onconfirm_purchase_dccOperationCompleted(object arg) {
            if ((this.confirm_purchase_dccCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.confirm_purchase_dccCompleted(this, new confirm_purchase_dccCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#execute_refund", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_RESPONSE", DataType="integer")]
        public string execute_refund(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, ref string DS_MERCHANT_AUTHCODE, ref string DS_MERCHANT_ORDER, ref string DS_MERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_MERCHANTDESCRIPTOR, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("execute_refund", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AUTHCODE,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_MERCHANTDESCRIPTOR});
            DS_MERCHANT_AUTHCODE = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_CURRENCY = ((string)(results[3]));
            DS_ERROR_ID = ((string)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void execute_refundAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AUTHCODE, string DS_MERCHANT_ORDER, string DS_MERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_MERCHANTDESCRIPTOR) {
            this.execute_refundAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AUTHCODE, DS_MERCHANT_ORDER, DS_MERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_MERCHANT_AMOUNT, DS_MERCHANT_MERCHANTDESCRIPTOR, null);
        }
        
        /// <remarks/>
        public void execute_refundAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AUTHCODE, string DS_MERCHANT_ORDER, string DS_MERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_MERCHANTDESCRIPTOR, object userState) {
            if ((this.execute_refundOperationCompleted == null)) {
                this.execute_refundOperationCompleted = new System.Threading.SendOrPostCallback(this.Onexecute_refundOperationCompleted);
            }
            this.InvokeAsync("execute_refund", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AUTHCODE,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_MERCHANTDESCRIPTOR}, this.execute_refundOperationCompleted, userState);
        }
        
        private void Onexecute_refundOperationCompleted(object arg) {
            if ((this.execute_refundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.execute_refundCompleted(this, new execute_refundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#create_subscription", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_IDUSER", DataType="integer")]
        public string create_subscription(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_MERCHANT_PAN, 
                    string DS_MERCHANT_EXPIRYDATE, 
                    string DS_MERCHANT_CVV2, 
                    string DS_SUBSCRIPTION_STARTDATE, 
                    string DS_SUBSCRIPTION_ENDDATE, 
                    ref string DS_SUBSCRIPTION_ORDER, 
                    string DS_SUBSCRIPTION_PERIODICITY, 
                    ref string DS_SUBSCRIPTION_AMOUNT, 
                    ref string DS_SUBSCRIPTION_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_EXECUTE, 
                    string DS_MERCHANT_CARDHOLDERNAME, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_USER_INTERACTION, 
                    out string DS_TOKEN_USER, 
                    out string DS_MERCHANT_AUTHCODE, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("create_subscription", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_PAN,
                        DS_MERCHANT_EXPIRYDATE,
                        DS_MERCHANT_CVV2,
                        DS_SUBSCRIPTION_STARTDATE,
                        DS_SUBSCRIPTION_ENDDATE,
                        DS_SUBSCRIPTION_ORDER,
                        DS_SUBSCRIPTION_PERIODICITY,
                        DS_SUBSCRIPTION_AMOUNT,
                        DS_SUBSCRIPTION_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_EXECUTE,
                        DS_MERCHANT_CARDHOLDERNAME,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION});
            DS_SUBSCRIPTION_ORDER = ((string)(results[1]));
            DS_SUBSCRIPTION_AMOUNT = ((string)(results[2]));
            DS_SUBSCRIPTION_CURRENCY = ((string)(results[3]));
            DS_TOKEN_USER = ((string)(results[4]));
            DS_MERCHANT_AUTHCODE = ((string)(results[5]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[6]));
            DS_ERROR_ID = ((string)(results[7]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void create_subscriptionAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_MERCHANT_PAN, 
                    string DS_MERCHANT_EXPIRYDATE, 
                    string DS_MERCHANT_CVV2, 
                    string DS_SUBSCRIPTION_STARTDATE, 
                    string DS_SUBSCRIPTION_ENDDATE, 
                    string DS_SUBSCRIPTION_ORDER, 
                    string DS_SUBSCRIPTION_PERIODICITY, 
                    string DS_SUBSCRIPTION_AMOUNT, 
                    string DS_SUBSCRIPTION_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_EXECUTE, 
                    string DS_MERCHANT_CARDHOLDERNAME, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION) {
            this.create_subscriptionAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_PAN, DS_MERCHANT_EXPIRYDATE, DS_MERCHANT_CVV2, DS_SUBSCRIPTION_STARTDATE, DS_SUBSCRIPTION_ENDDATE, DS_SUBSCRIPTION_ORDER, DS_SUBSCRIPTION_PERIODICITY, DS_SUBSCRIPTION_AMOUNT, DS_SUBSCRIPTION_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_EXECUTE, DS_MERCHANT_CARDHOLDERNAME, DS_MERCHANT_SCORING, DS_MERCHANT_DATA, DS_MERCHANT_SCA_EXCEPTION, DS_MERCHANT_TRX_TYPE, DS_ESCROW_TARGETS, DS_USER_INTERACTION, null);
        }
        
        /// <remarks/>
        public void create_subscriptionAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_MERCHANT_PAN, 
                    string DS_MERCHANT_EXPIRYDATE, 
                    string DS_MERCHANT_CVV2, 
                    string DS_SUBSCRIPTION_STARTDATE, 
                    string DS_SUBSCRIPTION_ENDDATE, 
                    string DS_SUBSCRIPTION_ORDER, 
                    string DS_SUBSCRIPTION_PERIODICITY, 
                    string DS_SUBSCRIPTION_AMOUNT, 
                    string DS_SUBSCRIPTION_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_EXECUTE, 
                    string DS_MERCHANT_CARDHOLDERNAME, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION, 
                    object userState) {
            if ((this.create_subscriptionOperationCompleted == null)) {
                this.create_subscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.Oncreate_subscriptionOperationCompleted);
            }
            this.InvokeAsync("create_subscription", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_PAN,
                        DS_MERCHANT_EXPIRYDATE,
                        DS_MERCHANT_CVV2,
                        DS_SUBSCRIPTION_STARTDATE,
                        DS_SUBSCRIPTION_ENDDATE,
                        DS_SUBSCRIPTION_ORDER,
                        DS_SUBSCRIPTION_PERIODICITY,
                        DS_SUBSCRIPTION_AMOUNT,
                        DS_SUBSCRIPTION_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_EXECUTE,
                        DS_MERCHANT_CARDHOLDERNAME,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION}, this.create_subscriptionOperationCompleted, userState);
        }
        
        private void Oncreate_subscriptionOperationCompleted(object arg) {
            if ((this.create_subscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.create_subscriptionCompleted(this, new create_subscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#edit_subscription", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_SUBSCRIPTION_ORDER")]
        public string edit_subscription(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, ref string DS_IDUSER, ref string DS_TOKEN_USER, string DS_SUBSCRIPTION_STARTDATE, string DS_SUBSCRIPTION_ENDDATE, string DS_SUBSCRIPTION_PERIODICITY, ref string DS_SUBSCRIPTION_AMOUNT, string DS_MERCHANT_MERCHANTSIGNATURE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_EXECUTE, string DS_ORIGINAL_IP, out string DS_SUBSCRIPTION_CURRENCY, out string DS_MERCHANT_AUTHCODE, out string DS_MERCHANT_CARDCOUNTRY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("edit_subscription", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_SUBSCRIPTION_STARTDATE,
                        DS_SUBSCRIPTION_ENDDATE,
                        DS_SUBSCRIPTION_PERIODICITY,
                        DS_SUBSCRIPTION_AMOUNT,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_EXECUTE,
                        DS_ORIGINAL_IP});
            DS_IDUSER = ((string)(results[1]));
            DS_TOKEN_USER = ((string)(results[2]));
            DS_SUBSCRIPTION_AMOUNT = ((string)(results[3]));
            DS_SUBSCRIPTION_CURRENCY = ((string)(results[4]));
            DS_MERCHANT_AUTHCODE = ((string)(results[5]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[6]));
            DS_ERROR_ID = ((string)(results[7]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void edit_subscriptionAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_SUBSCRIPTION_STARTDATE, string DS_SUBSCRIPTION_ENDDATE, string DS_SUBSCRIPTION_PERIODICITY, string DS_SUBSCRIPTION_AMOUNT, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_EXECUTE, string DS_ORIGINAL_IP) {
            this.edit_subscriptionAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_SUBSCRIPTION_STARTDATE, DS_SUBSCRIPTION_ENDDATE, DS_SUBSCRIPTION_PERIODICITY, DS_SUBSCRIPTION_AMOUNT, DS_MERCHANT_MERCHANTSIGNATURE, DS_EXECUTE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void edit_subscriptionAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_SUBSCRIPTION_STARTDATE, string DS_SUBSCRIPTION_ENDDATE, string DS_SUBSCRIPTION_PERIODICITY, string DS_SUBSCRIPTION_AMOUNT, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_EXECUTE, string DS_ORIGINAL_IP, object userState) {
            if ((this.edit_subscriptionOperationCompleted == null)) {
                this.edit_subscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.Onedit_subscriptionOperationCompleted);
            }
            this.InvokeAsync("edit_subscription", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_SUBSCRIPTION_STARTDATE,
                        DS_SUBSCRIPTION_ENDDATE,
                        DS_SUBSCRIPTION_PERIODICITY,
                        DS_SUBSCRIPTION_AMOUNT,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_EXECUTE,
                        DS_ORIGINAL_IP}, this.edit_subscriptionOperationCompleted, userState);
        }
        
        private void Onedit_subscriptionOperationCompleted(object arg) {
            if ((this.edit_subscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.edit_subscriptionCompleted(this, new edit_subscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#remove_subscription", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_RESPONSE", DataType="integer")]
        public string remove_subscription(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("remove_subscription", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP});
            DS_ERROR_ID = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void remove_subscriptionAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP) {
            this.remove_subscriptionAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void remove_subscriptionAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.remove_subscriptionOperationCompleted == null)) {
                this.remove_subscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.Onremove_subscriptionOperationCompleted);
            }
            this.InvokeAsync("remove_subscription", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP}, this.remove_subscriptionOperationCompleted, userState);
        }
        
        private void Onremove_subscriptionOperationCompleted(object arg) {
            if ((this.remove_subscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.remove_subscriptionCompleted(this, new remove_subscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#create_subscription_token", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_AUTHCODE")]
        public string create_subscription_token(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    ref string DS_IDUSER, 
                    ref string DS_TOKEN_USER, 
                    string DS_SUBSCRIPTION_STARTDATE, 
                    string DS_SUBSCRIPTION_ENDDATE, 
                    ref string DS_SUBSCRIPTION_ORDER, 
                    string DS_SUBSCRIPTION_PERIODICITY, 
                    ref string DS_SUBSCRIPTION_AMOUNT, 
                    ref string DS_SUBSCRIPTION_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_USER_INTERACTION, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("create_subscription_token", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_SUBSCRIPTION_STARTDATE,
                        DS_SUBSCRIPTION_ENDDATE,
                        DS_SUBSCRIPTION_ORDER,
                        DS_SUBSCRIPTION_PERIODICITY,
                        DS_SUBSCRIPTION_AMOUNT,
                        DS_SUBSCRIPTION_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION});
            DS_IDUSER = ((string)(results[1]));
            DS_TOKEN_USER = ((string)(results[2]));
            DS_SUBSCRIPTION_ORDER = ((string)(results[3]));
            DS_SUBSCRIPTION_AMOUNT = ((string)(results[4]));
            DS_SUBSCRIPTION_CURRENCY = ((string)(results[5]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[6]));
            DS_ERROR_ID = ((string)(results[7]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void create_subscription_tokenAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    string DS_SUBSCRIPTION_STARTDATE, 
                    string DS_SUBSCRIPTION_ENDDATE, 
                    string DS_SUBSCRIPTION_ORDER, 
                    string DS_SUBSCRIPTION_PERIODICITY, 
                    string DS_SUBSCRIPTION_AMOUNT, 
                    string DS_SUBSCRIPTION_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION) {
            this.create_subscription_tokenAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_SUBSCRIPTION_STARTDATE, DS_SUBSCRIPTION_ENDDATE, DS_SUBSCRIPTION_ORDER, DS_SUBSCRIPTION_PERIODICITY, DS_SUBSCRIPTION_AMOUNT, DS_SUBSCRIPTION_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_MERCHANT_SCORING, DS_MERCHANT_DATA, DS_MERCHANT_SCA_EXCEPTION, DS_MERCHANT_TRX_TYPE, DS_ESCROW_TARGETS, DS_USER_INTERACTION, null);
        }
        
        /// <remarks/>
        public void create_subscription_tokenAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    string DS_SUBSCRIPTION_STARTDATE, 
                    string DS_SUBSCRIPTION_ENDDATE, 
                    string DS_SUBSCRIPTION_ORDER, 
                    string DS_SUBSCRIPTION_PERIODICITY, 
                    string DS_SUBSCRIPTION_AMOUNT, 
                    string DS_SUBSCRIPTION_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION, 
                    object userState) {
            if ((this.create_subscription_tokenOperationCompleted == null)) {
                this.create_subscription_tokenOperationCompleted = new System.Threading.SendOrPostCallback(this.Oncreate_subscription_tokenOperationCompleted);
            }
            this.InvokeAsync("create_subscription_token", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_SUBSCRIPTION_STARTDATE,
                        DS_SUBSCRIPTION_ENDDATE,
                        DS_SUBSCRIPTION_ORDER,
                        DS_SUBSCRIPTION_PERIODICITY,
                        DS_SUBSCRIPTION_AMOUNT,
                        DS_SUBSCRIPTION_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION}, this.create_subscription_tokenOperationCompleted, userState);
        }
        
        private void Oncreate_subscription_tokenOperationCompleted(object arg) {
            if ((this.create_subscription_tokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.create_subscription_tokenCompleted(this, new create_subscription_tokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#create_preauthorization", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_AUTHCODE")]
        public string create_preauthorization(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    ref string DS_MERCHANT_AMOUNT, 
                    ref string DS_MERCHANT_ORDER, 
                    ref string DS_MERCHANT_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_PRODUCTDESCRIPTION, 
                    string DS_MERCHANT_OWNER, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_MERCHANTDESCRIPTOR, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string DS_USER_INTERACTION, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("create_preauthorization", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_OWNER,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_MERCHANTDESCRIPTOR,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_CURRENCY = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void create_preauthorizationAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    string DS_MERCHANT_AMOUNT, 
                    string DS_MERCHANT_ORDER, 
                    string DS_MERCHANT_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_PRODUCTDESCRIPTION, 
                    string DS_MERCHANT_OWNER, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_MERCHANTDESCRIPTOR, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION) {
            this.create_preauthorizationAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_MERCHANT_PRODUCTDESCRIPTION, DS_MERCHANT_OWNER, DS_MERCHANT_SCORING, DS_MERCHANT_DATA, DS_MERCHANT_MERCHANTDESCRIPTOR, DS_MERCHANT_SCA_EXCEPTION, DS_MERCHANT_TRX_TYPE, DS_ESCROW_TARGETS, DS_USER_INTERACTION, null);
        }
        
        /// <remarks/>
        public void create_preauthorizationAsync(
                    string DS_MERCHANT_MERCHANTCODE, 
                    string DS_MERCHANT_TERMINAL, 
                    string DS_IDUSER, 
                    string DS_TOKEN_USER, 
                    string DS_MERCHANT_AMOUNT, 
                    string DS_MERCHANT_ORDER, 
                    string DS_MERCHANT_CURRENCY, 
                    string DS_MERCHANT_MERCHANTSIGNATURE, 
                    string DS_ORIGINAL_IP, 
                    string DS_MERCHANT_PRODUCTDESCRIPTION, 
                    string DS_MERCHANT_OWNER, 
                    string DS_MERCHANT_SCORING, 
                    string DS_MERCHANT_DATA, 
                    string DS_MERCHANT_MERCHANTDESCRIPTOR, 
                    string DS_MERCHANT_SCA_EXCEPTION, 
                    string DS_MERCHANT_TRX_TYPE, 
                    string DS_ESCROW_TARGETS, 
                    string DS_USER_INTERACTION, 
                    object userState) {
            if ((this.create_preauthorizationOperationCompleted == null)) {
                this.create_preauthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.Oncreate_preauthorizationOperationCompleted);
            }
            this.InvokeAsync("create_preauthorization", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_OWNER,
                        DS_MERCHANT_SCORING,
                        DS_MERCHANT_DATA,
                        DS_MERCHANT_MERCHANTDESCRIPTOR,
                        DS_MERCHANT_SCA_EXCEPTION,
                        DS_MERCHANT_TRX_TYPE,
                        DS_ESCROW_TARGETS,
                        DS_USER_INTERACTION}, this.create_preauthorizationOperationCompleted, userState);
        }
        
        private void Oncreate_preauthorizationOperationCompleted(object arg) {
            if ((this.create_preauthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.create_preauthorizationCompleted(this, new create_preauthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#preauthorization_confirm", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_CURRENCY")]
        public string preauthorization_confirm(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, ref string DS_MERCHANT_AMOUNT, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_MERCHANTDESCRIPTOR, out string DS_MERCHANT_AUTHCODE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("preauthorization_confirm", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_MERCHANTDESCRIPTOR});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_AUTHCODE = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void preauthorization_confirmAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_MERCHANTDESCRIPTOR) {
            this.preauthorization_confirmAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, DS_MERCHANT_MERCHANTDESCRIPTOR, null);
        }
        
        /// <remarks/>
        public void preauthorization_confirmAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, string DS_MERCHANT_MERCHANTDESCRIPTOR, object userState) {
            if ((this.preauthorization_confirmOperationCompleted == null)) {
                this.preauthorization_confirmOperationCompleted = new System.Threading.SendOrPostCallback(this.Onpreauthorization_confirmOperationCompleted);
            }
            this.InvokeAsync("preauthorization_confirm", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP,
                        DS_MERCHANT_MERCHANTDESCRIPTOR}, this.preauthorization_confirmOperationCompleted, userState);
        }
        
        private void Onpreauthorization_confirmOperationCompleted(object arg) {
            if ((this.preauthorization_confirmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.preauthorization_confirmCompleted(this, new preauthorization_confirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#preauthorization_cancel", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_CURRENCY")]
        public string preauthorization_cancel(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, ref string DS_MERCHANT_AMOUNT, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, out string DS_MERCHANT_AUTHCODE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("preauthorization_cancel", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_AUTHCODE = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void preauthorization_cancelAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP) {
            this.preauthorization_cancelAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void preauthorization_cancelAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.preauthorization_cancelOperationCompleted == null)) {
                this.preauthorization_cancelOperationCompleted = new System.Threading.SendOrPostCallback(this.Onpreauthorization_cancelOperationCompleted);
            }
            this.InvokeAsync("preauthorization_cancel", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP}, this.preauthorization_cancelOperationCompleted, userState);
        }
        
        private void Onpreauthorization_cancelOperationCompleted(object arg) {
            if ((this.preauthorization_cancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.preauthorization_cancelCompleted(this, new preauthorization_cancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#deferred_preauthorization_con" +
            "firm", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_CURRENCY")]
        public string deferred_preauthorization_confirm(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, ref string DS_MERCHANT_AMOUNT, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, out string DS_MERCHANT_AUTHCODE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("deferred_preauthorization_confirm", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_AUTHCODE = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deferred_preauthorization_confirmAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP) {
            this.deferred_preauthorization_confirmAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void deferred_preauthorization_confirmAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.deferred_preauthorization_confirmOperationCompleted == null)) {
                this.deferred_preauthorization_confirmOperationCompleted = new System.Threading.SendOrPostCallback(this.Ondeferred_preauthorization_confirmOperationCompleted);
            }
            this.InvokeAsync("deferred_preauthorization_confirm", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP}, this.deferred_preauthorization_confirmOperationCompleted, userState);
        }
        
        private void Ondeferred_preauthorization_confirmOperationCompleted(object arg) {
            if ((this.deferred_preauthorization_confirmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deferred_preauthorization_confirmCompleted(this, new deferred_preauthorization_confirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#deferred_preauthorization_can" +
            "cel", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_CURRENCY")]
        public string deferred_preauthorization_cancel(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, ref string DS_MERCHANT_AMOUNT, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, out string DS_MERCHANT_AUTHCODE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("deferred_preauthorization_cancel", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_AUTHCODE = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deferred_preauthorization_cancelAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP) {
            this.deferred_preauthorization_cancelAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_MERCHANTSIGNATURE, DS_ORIGINAL_IP, null);
        }
        
        /// <remarks/>
        public void deferred_preauthorization_cancelAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_ORIGINAL_IP, object userState) {
            if ((this.deferred_preauthorization_cancelOperationCompleted == null)) {
                this.deferred_preauthorization_cancelOperationCompleted = new System.Threading.SendOrPostCallback(this.Ondeferred_preauthorization_cancelOperationCompleted);
            }
            this.InvokeAsync("deferred_preauthorization_cancel", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_ORIGINAL_IP}, this.deferred_preauthorization_cancelOperationCompleted, userState);
        }
        
        private void Ondeferred_preauthorization_cancelOperationCompleted(object arg) {
            if ((this.deferred_preauthorization_cancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deferred_preauthorization_cancelCompleted(this, new deferred_preauthorization_cancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#execute_purchase_rtoken", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_AUTHCODE")]
        public string execute_purchase_rtoken(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, ref string DS_MERCHANT_AMOUNT, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_IDENTIFIER, ref string DS_MERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_MERCHANT_PRODUCTDESCRIPTION, string DS_MERCHANT_MERCHANTDESCRIPTOR, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_MERCHANT_CARDCOUNTRY, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("execute_purchase_rtoken", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_IDENTIFIER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_MERCHANTDESCRIPTOR});
            DS_MERCHANT_AMOUNT = ((string)(results[1]));
            DS_MERCHANT_ORDER = ((string)(results[2]));
            DS_MERCHANT_CURRENCY = ((string)(results[3]));
            DS_MERCHANT_CARDCOUNTRY = ((string)(results[4]));
            DS_RESPONSE = ((string)(results[5]));
            DS_ERROR_ID = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void execute_purchase_rtokenAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_IDENTIFIER, string DS_MERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_MERCHANT_PRODUCTDESCRIPTION, string DS_MERCHANT_MERCHANTDESCRIPTOR) {
            this.execute_purchase_rtokenAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_AMOUNT, DS_MERCHANT_ORDER, DS_MERCHANT_IDENTIFIER, DS_MERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, DS_MERCHANT_PRODUCTDESCRIPTION, DS_MERCHANT_MERCHANTDESCRIPTOR, null);
        }
        
        /// <remarks/>
        public void execute_purchase_rtokenAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_AMOUNT, string DS_MERCHANT_ORDER, string DS_MERCHANT_IDENTIFIER, string DS_MERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, string DS_MERCHANT_PRODUCTDESCRIPTION, string DS_MERCHANT_MERCHANTDESCRIPTOR, object userState) {
            if ((this.execute_purchase_rtokenOperationCompleted == null)) {
                this.execute_purchase_rtokenOperationCompleted = new System.Threading.SendOrPostCallback(this.Onexecute_purchase_rtokenOperationCompleted);
            }
            this.InvokeAsync("execute_purchase_rtoken", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_AMOUNT,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_IDENTIFIER,
                        DS_MERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE,
                        DS_MERCHANT_PRODUCTDESCRIPTION,
                        DS_MERCHANT_MERCHANTDESCRIPTOR}, this.execute_purchase_rtokenOperationCompleted, userState);
        }
        
        private void Onexecute_purchase_rtokenOperationCompleted(object arg) {
            if ((this.execute_purchase_rtokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.execute_purchase_rtokenCompleted(this, new execute_purchase_rtokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#split_transfer", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_TRANSFER_AUTHCODE")]
        public string split_transfer(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_AUTHCODE, string DS_SUBMERCHANT_TERMINAL_SPLITID, ref string DS_SUBMERCHANT_AMOUNT, ref string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("split_transfer", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_AUTHCODE,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE});
            DS_MERCHANT_ORDER = ((string)(results[1]));
            DS_SUBMERCHANT_AMOUNT = ((string)(results[2]));
            DS_SUBMERCHANT_CURRENCY = ((string)(results[3]));
            DS_RESPONSE = ((string)(results[4]));
            DS_ERROR_ID = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void split_transferAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_MERCHANT_AUTHCODE, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE) {
            this.split_transferAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_ORDER, DS_MERCHANT_AUTHCODE, DS_SUBMERCHANT_TERMINAL_SPLITID, DS_SUBMERCHANT_AMOUNT, DS_SUBMERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, null);
        }
        
        /// <remarks/>
        public void split_transferAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_MERCHANT_AUTHCODE, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, object userState) {
            if ((this.split_transferOperationCompleted == null)) {
                this.split_transferOperationCompleted = new System.Threading.SendOrPostCallback(this.Onsplit_transferOperationCompleted);
            }
            this.InvokeAsync("split_transfer", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_AUTHCODE,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE}, this.split_transferOperationCompleted, userState);
        }
        
        private void Onsplit_transferOperationCompleted(object arg) {
            if ((this.split_transferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.split_transferCompleted(this, new split_transferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#split_transfer_reversal", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_TRANSFER_AUTHCODE")]
        public string split_transfer_reversal(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, ref string DS_MERCHANT_ORDER, string DS_MERCHANT_AUTHCODE, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_SPLIT_AUTHCODE, ref string DS_SUBMERCHANT_AMOUNT, ref string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("split_transfer_reversal", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_AUTHCODE,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_SPLIT_AUTHCODE,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE});
            DS_MERCHANT_ORDER = ((string)(results[1]));
            DS_SUBMERCHANT_AMOUNT = ((string)(results[2]));
            DS_SUBMERCHANT_CURRENCY = ((string)(results[3]));
            DS_RESPONSE = ((string)(results[4]));
            DS_ERROR_ID = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void split_transfer_reversalAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_MERCHANT_AUTHCODE, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_SPLIT_AUTHCODE, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE) {
            this.split_transfer_reversalAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_ORDER, DS_MERCHANT_AUTHCODE, DS_SUBMERCHANT_TERMINAL_SPLITID, DS_SUBMERCHANT_SPLIT_AUTHCODE, DS_SUBMERCHANT_AMOUNT, DS_SUBMERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, null);
        }
        
        /// <remarks/>
        public void split_transfer_reversalAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_MERCHANT_AUTHCODE, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_SPLIT_AUTHCODE, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, object userState) {
            if ((this.split_transfer_reversalOperationCompleted == null)) {
                this.split_transfer_reversalOperationCompleted = new System.Threading.SendOrPostCallback(this.Onsplit_transfer_reversalOperationCompleted);
            }
            this.InvokeAsync("split_transfer_reversal", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_MERCHANT_AUTHCODE,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_SPLIT_AUTHCODE,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE}, this.split_transfer_reversalOperationCompleted, userState);
        }
        
        private void Onsplit_transfer_reversalOperationCompleted(object arg) {
            if ((this.split_transfer_reversalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.split_transfer_reversalCompleted(this, new split_transfer_reversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#get_balance", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_GLOBAL")]
        public string get_balance(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_MERCHANTSIGNATURE, out string DS_AVAILABLE, out string DS_DEPOSIT, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("get_balance", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_MERCHANTSIGNATURE});
            DS_AVAILABLE = ((string)(results[1]));
            DS_DEPOSIT = ((string)(results[2]));
            DS_RESPONSE = ((string)(results[3]));
            DS_ERROR_ID = ((string)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_balanceAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_MERCHANTSIGNATURE) {
            this.get_balanceAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_MERCHANTSIGNATURE, null);
        }
        
        /// <remarks/>
        public void get_balanceAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_MERCHANTSIGNATURE, object userState) {
            if ((this.get_balanceOperationCompleted == null)) {
                this.get_balanceOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_balanceOperationCompleted);
            }
            this.InvokeAsync("get_balance", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_MERCHANTSIGNATURE}, this.get_balanceOperationCompleted, userState);
        }
        
        private void Onget_balanceOperationCompleted(object arg) {
            if ((this.get_balanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_balanceCompleted(this, new get_balanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#update_expiry_date", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_RESPONSE", DataType="integer")]
        public string update_expiry_date(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, ref string DS_TOKEN_USER, string DS_EXPIRY_DATE, string DS_MERCHANT_CVV2, string DS_MERCHANT_MERCHANTSIGNATURE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("update_expiry_date", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_EXPIRY_DATE,
                        DS_MERCHANT_CVV2,
                        DS_MERCHANT_MERCHANTSIGNATURE});
            DS_TOKEN_USER = ((string)(results[1]));
            DS_ERROR_ID = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void update_expiry_dateAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_EXPIRY_DATE, string DS_MERCHANT_CVV2, string DS_MERCHANT_MERCHANTSIGNATURE) {
            this.update_expiry_dateAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_IDUSER, DS_TOKEN_USER, DS_EXPIRY_DATE, DS_MERCHANT_CVV2, DS_MERCHANT_MERCHANTSIGNATURE, null);
        }
        
        /// <remarks/>
        public void update_expiry_dateAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_IDUSER, string DS_TOKEN_USER, string DS_EXPIRY_DATE, string DS_MERCHANT_CVV2, string DS_MERCHANT_MERCHANTSIGNATURE, object userState) {
            if ((this.update_expiry_dateOperationCompleted == null)) {
                this.update_expiry_dateOperationCompleted = new System.Threading.SendOrPostCallback(this.Onupdate_expiry_dateOperationCompleted);
            }
            this.InvokeAsync("update_expiry_date", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_IDUSER,
                        DS_TOKEN_USER,
                        DS_EXPIRY_DATE,
                        DS_MERCHANT_CVV2,
                        DS_MERCHANT_MERCHANTSIGNATURE}, this.update_expiry_dateOperationCompleted, userState);
        }
        
        private void Onupdate_expiry_dateOperationCompleted(object arg) {
            if ((this.update_expiry_dateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.update_expiry_dateCompleted(this, new update_expiry_dateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#transfer", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_TRANSFER_AUTHCODE")]
        public string transfer(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, ref string DS_MERCHANT_ORDER, string DS_SUBMERCHANT_TERMINAL_SPLITID, ref string DS_SUBMERCHANT_AMOUNT, ref string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("transfer", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE});
            DS_MERCHANT_ORDER = ((string)(results[1]));
            DS_SUBMERCHANT_AMOUNT = ((string)(results[2]));
            DS_SUBMERCHANT_CURRENCY = ((string)(results[3]));
            DS_RESPONSE = ((string)(results[4]));
            DS_ERROR_ID = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void transferAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE) {
            this.transferAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_ORDER, DS_SUBMERCHANT_TERMINAL_SPLITID, DS_SUBMERCHANT_AMOUNT, DS_SUBMERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, null);
        }
        
        /// <remarks/>
        public void transferAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, object userState) {
            if ((this.transferOperationCompleted == null)) {
                this.transferOperationCompleted = new System.Threading.SendOrPostCallback(this.OntransferOperationCompleted);
            }
            this.InvokeAsync("transfer", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE}, this.transferOperationCompleted, userState);
        }
        
        private void OntransferOperationCompleted(object arg) {
            if ((this.transferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.transferCompleted(this, new transferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#BankStore#transfer_reversal", RequestNamespace="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace="http://schemas.xmlsoap.org/soap/envelope/")]
        [return: System.Xml.Serialization.SoapElementAttribute("DS_MERCHANT_TRANSFER_AUTHCODE")]
        public string transfer_reversal(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, ref string DS_MERCHANT_ORDER, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_SPLIT_AUTHCODE, ref string DS_SUBMERCHANT_AMOUNT, ref string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_RESPONSE, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] out string DS_ERROR_ID) {
            object[] results = this.Invoke("transfer_reversal", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_SPLIT_AUTHCODE,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE});
            DS_MERCHANT_ORDER = ((string)(results[1]));
            DS_SUBMERCHANT_AMOUNT = ((string)(results[2]));
            DS_SUBMERCHANT_CURRENCY = ((string)(results[3]));
            DS_RESPONSE = ((string)(results[4]));
            DS_ERROR_ID = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void transfer_reversalAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_SPLIT_AUTHCODE, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE) {
            this.transfer_reversalAsync(DS_MERCHANT_MERCHANTCODE, DS_MERCHANT_TERMINAL, DS_MERCHANT_ORDER, DS_SUBMERCHANT_TERMINAL_SPLITID, DS_SUBMERCHANT_SPLIT_AUTHCODE, DS_SUBMERCHANT_AMOUNT, DS_SUBMERCHANT_CURRENCY, DS_MERCHANT_MERCHANTSIGNATURE, null);
        }
        
        /// <remarks/>
        public void transfer_reversalAsync(string DS_MERCHANT_MERCHANTCODE, string DS_MERCHANT_TERMINAL, string DS_MERCHANT_ORDER, string DS_SUBMERCHANT_TERMINAL_SPLITID, string DS_SUBMERCHANT_SPLIT_AUTHCODE, string DS_SUBMERCHANT_AMOUNT, string DS_SUBMERCHANT_CURRENCY, string DS_MERCHANT_MERCHANTSIGNATURE, object userState) {
            if ((this.transfer_reversalOperationCompleted == null)) {
                this.transfer_reversalOperationCompleted = new System.Threading.SendOrPostCallback(this.Ontransfer_reversalOperationCompleted);
            }
            this.InvokeAsync("transfer_reversal", new object[] {
                        DS_MERCHANT_MERCHANTCODE,
                        DS_MERCHANT_TERMINAL,
                        DS_MERCHANT_ORDER,
                        DS_SUBMERCHANT_TERMINAL_SPLITID,
                        DS_SUBMERCHANT_SPLIT_AUTHCODE,
                        DS_SUBMERCHANT_AMOUNT,
                        DS_SUBMERCHANT_CURRENCY,
                        DS_MERCHANT_MERCHANTSIGNATURE}, this.transfer_reversalOperationCompleted, userState);
        }
        
        private void Ontransfer_reversalOperationCompleted(object arg) {
            if ((this.transfer_reversalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.transfer_reversalCompleted(this, new transfer_reversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void add_userCompletedEventHandler(object sender, add_userCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class add_userCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal add_userCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_TOKEN_USER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void add_user_tokenCompletedEventHandler(object sender, add_user_tokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class add_user_tokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal add_user_tokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_TOKEN_USER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void add_user_dukptCompletedEventHandler(object sender, add_user_dukptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class add_user_dukptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal add_user_dukptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_TOKEN_USER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_EXPIRY_DATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void info_userCompletedEventHandler(object sender, info_userCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class info_userCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal info_userCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_CARD_BRAND {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_CARD_TYPE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_CARD_I_COUNTRY_ISO3 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_EXPIRYDATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_CARD_HASH {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string DS_CARD_CATEGORY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string DS_SEPA_CARD {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void remove_userCompletedEventHandler(object sender, remove_userCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class remove_userCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal remove_userCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void execute_purchaseCompletedEventHandler(object sender, execute_purchaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class execute_purchaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal execute_purchaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string DS_CHALLENGE_URL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void execute_purchase_dccCompletedEventHandler(object sender, execute_purchase_dccCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class execute_purchase_dccCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal execute_purchase_dccCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_SESSION {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_CURRENCYISO3 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_CURRENCYNAME {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_EXCHANGE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_MARKUP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_DCC_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void confirm_purchase_dccCompletedEventHandler(object sender, confirm_purchase_dccCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class confirm_purchase_dccCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal confirm_purchase_dccCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void execute_refundCompletedEventHandler(object sender, execute_refundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class execute_refundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal execute_refundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void create_subscriptionCompletedEventHandler(object sender, create_subscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class create_subscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal create_subscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_TOKEN_USER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void edit_subscriptionCompletedEventHandler(object sender, edit_subscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class edit_subscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal edit_subscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_IDUSER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_TOKEN_USER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void remove_subscriptionCompletedEventHandler(object sender, remove_subscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class remove_subscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal remove_subscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void create_subscription_tokenCompletedEventHandler(object sender, create_subscription_tokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class create_subscription_tokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal create_subscription_tokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_IDUSER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_TOKEN_USER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBSCRIPTION_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void create_preauthorizationCompletedEventHandler(object sender, create_preauthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class create_preauthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal create_preauthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void preauthorization_confirmCompletedEventHandler(object sender, preauthorization_confirmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class preauthorization_confirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal preauthorization_confirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void preauthorization_cancelCompletedEventHandler(object sender, preauthorization_cancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class preauthorization_cancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal preauthorization_cancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deferred_preauthorization_confirmCompletedEventHandler(object sender, deferred_preauthorization_confirmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deferred_preauthorization_confirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deferred_preauthorization_confirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deferred_preauthorization_cancelCompletedEventHandler(object sender, deferred_preauthorization_cancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deferred_preauthorization_cancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deferred_preauthorization_cancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AUTHCODE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void execute_purchase_rtokenCompletedEventHandler(object sender, execute_purchase_rtokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class execute_purchase_rtokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal execute_purchase_rtokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_CARDCOUNTRY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void split_transferCompletedEventHandler(object sender, split_transferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class split_transferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal split_transferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void split_transfer_reversalCompletedEventHandler(object sender, split_transfer_reversalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class split_transfer_reversalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal split_transfer_reversalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void get_balanceCompletedEventHandler(object sender, get_balanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_balanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_balanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_AVAILABLE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_DEPOSIT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void update_expiry_dateCompletedEventHandler(object sender, update_expiry_dateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class update_expiry_dateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal update_expiry_dateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_TOKEN_USER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void transferCompletedEventHandler(object sender, transferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class transferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal transferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void transfer_reversalCompletedEventHandler(object sender, transfer_reversalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class transfer_reversalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal transfer_reversalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DS_MERCHANT_ORDER {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_AMOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string DS_SUBMERCHANT_CURRENCY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DS_RESPONSE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DS_ERROR_ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
}

#pragma warning restore 1591